import time
from fetch_data import fetch_countries_data
from database import create_connection, create_table, insert_country
from analysis import analyze_data
from tabulate import tabulate

def show_intro():
    print("=" * 60)
    print("üåç CN230 Country Data Analysis Tool".center(60))
    print("-" * 60)
    print("‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å REST API ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡πà‡∏≤‡∏ô SQLite")
    print("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
    print("=" * 60)
    print()

def show_menu():
    print("\nüîé ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print("1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
    print("3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á")
    print("4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("5. ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("6. ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("7. ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    print("0. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    return input("‚û°Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ")

def main():
    show_intro()
    start = time.time()

    data = fetch_countries_data()
    conn = create_connection('data/countries.db')
    create_table(conn)

    for country in data:
        insert_country(conn, country)

    while True:
        choice = show_menu()
        cursor = conn.cursor()

        if choice == "1":
            analyze_data(conn)
        elif choice == "2":
            cursor.execute("SELECT region, COUNT(*) FROM countries GROUP BY region")
            print("\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ:")
            print(tabulate(cursor.fetchall(), headers=["‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"], tablefmt="fancy_grid"))
        elif choice == "3":
            cursor.execute("SELECT name FROM countries WHERE capital IS NULL OR TRIM(capital) = ''")
            results = cursor.fetchall()
            print(tabulate(results, headers=["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"], tablefmt="fancy_grid"))
        elif choice == "4":
            cursor.execute("SELECT name, population FROM countries ORDER BY population DESC LIMIT 10")
            results = [(name, f"{pop:,} ‡∏Ñ‡∏ô") for name, pop in cursor.fetchall()]
            print(tabulate(results, headers=["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£"], tablefmt="fancy_grid"))
        elif choice == "5":
            cursor.execute("SELECT name, area FROM countries ORDER BY area DESC LIMIT 10")
            results = [(name, f"{area:,.2f} ‡∏ï‡∏£.‡∏Å‡∏°.") for name, area in cursor.fetchall()]
            print(tabulate(results, headers=["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"], tablefmt="fancy_grid"))
        elif choice == "6":
            cursor.execute("""
                SELECT name, ROUND(population / area, 2)
                FROM countries
                WHERE area > 0 AND population IS NOT NULL
                ORDER BY population / area DESC LIMIT 10
            """)
            results = [(name, f"{density:,.2f} ‡∏Ñ‡∏ô/‡∏ï‡∏£.‡∏Å‡∏°.") for name, density in cursor.fetchall()]
            print(tabulate(results, headers=["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô"], tablefmt="fancy_grid"))
        elif choice == "7":
            region = input("üåê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (‡πÄ‡∏ä‡πà‡∏ô Asia, Europe): ")
            cursor.execute("SELECT name, capital FROM countries WHERE region = ?", (region,))
            results = cursor.fetchall()
            print(tabulate(results, headers=["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á"], tablefmt="fancy_grid"))
        elif choice == "0":
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°!")
            break
        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0-7)")

    conn.close()
    end = time.time()
    print(f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {end - start:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

if __name__ == "__main__":
    main()
